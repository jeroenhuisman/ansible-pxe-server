---
# tasks file for tftp-server
- name: Checking {{ repo_file }} exists
  stat:
    path: "{{ repo_file }}"
  register: stat_result
  failed_when: stat_result is undefined

- name: Set distro name
  set_fact:
    distro_full_name: "{{ lookup('ini', 'name section=InstallMedia file={{ repo_file }}') }}"

- name: Ensure tftp boot directories exists
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0775
  loop:
    - /var/lib/tftpboot/uefi
    - /var/lib/tftpboot/pxelinux
 
- name: Create temp directory for extracting boot files
  file: 
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0775
  loop:
    - /tmp/pxeboot
    - /tmp/uefiboot

- name: Find rpms for pxeboot
  find:
    paths: "/var/www/html/repos/{{ distro }}"
    patterns:
      - "shim-x64*.rpm"
      - "grub2-efi-x64*.rpm"
    recurse: yes
    excludes:
      - "*cdboot*"
      - "*modules*"
  register: rpms_to_extract

- name: Ensure temp location for extraction exists
  file:
    dest: /tmp/pxeboot
    state: directory
    owner: root
    group: root
    mode: 0775
  when: rpms_to_extract is defined

- name: Extract grub and shim rpms
  shell: "rpm2cpio {{ item.path }} | cpio -dimv"
  args:
    chdir: /tmp/pxeboot
  loop: "{{ rpms_to_extract.files }}"

- name: ensure permissions are correct and tftp folders exist
  file:
    dest: "{{ item }}"
    state: directory
    recurse: true
    owner: root
    group: root
    mode: 0775
  loop:
    - "/var/lib/tftpboot/uefi/{{ distro }}"
    - "/tmp/pxeboot"

- name: Find EFI files
  find:
    path: "/tmp/pxeboot/boot/efi/EFI/{{ distro }}"
    patterns: "*.efi"
  register: efi_files

- name: Copy EFI files
  copy:
    src: "{{ item.path }}"
    dest: "/var/lib/tftpboot/uefi"
    owner: root
    group: root
    mode: 0755
  loop: "{{ efi_files.files }}"
  when: efi_files is defined

- name: Ensure directory for kernel and initrd.img exists
  file:
    path: "/var/lib/tftpboot/images/{{ distro }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Find vmlinuz and initrd.imge
  find:
    path: "{{ repo_base_dir }}/{{ distro }}/images/"
    patterns:
      - "initrd.img"
      - "vmlinuz"
    recurse: yes
  register: "boot_files"

- name: Copy boot_files
  copy:
    src: "{{ item.path }}"
    dest: "/var/lib/tftpboot/images/{{ distro }}"
    owner: root
    group: root
    mode: 0755
  loop: "{{ boot_files.files }}"
  when: boot_files is defined

- name: Render grub.cfg for UEFI boot
  template:
    src: grub.cfg.j2
    dest: /var/lib/tftpboot/uefi/grub.cfg
